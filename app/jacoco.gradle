apply plugin: 'jacoco'

//子模块引用 apply from: '../scripts/jacoco.gradle'
jacoco {
    toolVersion = "0.8.7"
}

//源代码路径
def coverageSourceDirs = [
        "$projectDir\\src\\main\\java",
]

//class文件路径
def coverageClassDirs = [
        "$buildDir/intermediates/javac/debug/classes",
        "$buildDir/tmp/kotlin-classes/debug",
]

//解析ec文件的任务，会根据指定的class路径、源码路径、ec路径进行解析输出
task jacocoReportForModule(type: JacocoReport) {
    group = "dq-jacoco"
    description = "Generate Jacoco coverage reports for modules ${getProject().getName()}"
    System.out.println("description=$description")
    doFirst {
        delete fileTree(dir: "${buildDir}/classes", include: "**/JiBX_*.class")
    }
    reports {
        xml.enabled = false
        html.enabled = true
    }
    def dirs = files(files(coverageClassDirs).files.collect {
        fileTree(dir: it,
                // 过滤不需要统计的class文件
                excludes: ['**/R*.class',
                           '**/BR*.class',
                           '**/io/realm/**.class',
                           '**/Dagger**.class',
                           '**/databinding/*.class',
                           '**/BuildConfig.class',
                           '**/DataBindingInfo.class',
                           '**/DataBinderMapperImpl*.class',
                           '**/*$InjectAdapter.class',
                           '**/*$ModuleAdapter.class',
                           '**/*$ViewInjector*.class'
                ])
    })
    getClassDirectories().setFrom(dirs)

    sourceDirectories.setFrom(coverageSourceDirs)

    //String execPath = "$buildDir/outputs/code_coverage/debugAndroidTest/connected/coverage.ec"
    def executionDataDir = "$buildDir/outputs/code_coverage/debugAndroidTest/connected/"
    List<String> executionDataPaths = new ArrayList<>()
    File executionDataFile = new File(executionDataDir)
    executionDataFile.listFiles().each {
        executionDataPaths.add(it.absolutePath)
    }
    //路径用指定的目录，不用每个module下面存
    executionData.setFrom(executionDataPaths)
    System.out.println("dq-jacoco executionDataDir=${executionDataDir},executionDataPaths=${executionDataPaths.size()}")

    doFirst {
        System.out.println("buildDir=$buildDir")
        System.out.println("projectDir=$projectDir")
        //遍历class路径下的所有文件，替换字符
        coverageClassDirs.each { path ->
            new File(path).eachFileRecurse { file ->
                if (file.name.contains('$$')) {
                    System.out.println("file=$file")
                    file.renameTo(file.path.replace('$$', '$'))
                    System.out.println("new file=$file")
                }
            }
        }
    }
}

//初始化Jacoco Task
task jacocoInit() {
    //dependsOn(jacocoTestReportNew)
    group = "dq-jacoco"
    doFirst {
        File file2 = new File("$buildDir/outputs/code_coverage/debugAndroidTest/connected/")
        //if (!file2.exists()) {
            file2.mkdir()
        //}
    }
}
